{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c2ab834d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import copy\n",
    "import matplotlib.pyplot as plt\n",
    "import h5py\n",
    "import scipy\n",
    "import pandas as pd\n",
    "from PIL import Image\n",
    "from scipy import ndimage\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import average_precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn import metrics\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.metrics import RocCurveDisplay\n",
    "from sklearn.svm import SVC\n",
    "\n",
    "import tensorflow as tf\n",
    "\n",
    "\n",
    "%matplotlib inline\n",
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "\n",
    "#sample_file = '/home/nhen/matrix_chr6_22.txt'\n",
    "#matrix_file = pd.read_csv('/home/nhen/matrix_chr6_22.txt')\n",
    "#matrix_file.to_csv ('/home/nhen/matrix_chr6_22.csv', index=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "df2526cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "#matrix = pd.read_csv('/labs/mpsnyder/cs230_als/gwas_005_matrix_chr1_22_LDclumped_r2.5.csv', sep=',', header=None, low_memory=False)\n",
    "#matrix = pd.read_csv('/labs/mpsnyder/cs230_als/gwas_005_matrix_chr1_22_LDclumped_r2.1.csv', sep=',', header=None, low_memory=False)\n",
    "matrix = pd.read_csv('/labs/mpsnyder/cs230_als/gwas_005_matrix_chr1_22_LDclumped_r2.001.csv', sep=',', header=None, low_memory=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f514f199",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "    0                   1                  2                  3     \\\n",
      "0    NaN              Allele                 V1                 V2   \n",
      "1    1.0              UserID  LP6005681-DNA_A10  LP6005681-DNA_G10   \n",
      "2    2.0                 Sex                  1                  1   \n",
      "3    3.0           Phenotype                  1                  1   \n",
      "4    4.0     Northeast.Asian           0.021061           0.022297   \n",
      "5    5.0       Mediterranean           0.395768           0.371843   \n",
      "6    6.0    Southern.African           0.002118           0.001338   \n",
      "7    7.0     Southwest.Asian           0.216771           0.223045   \n",
      "8    8.0     Native.American           0.036049           0.016554   \n",
      "9    9.0            Oceanian           0.003113            0.01316   \n",
      "10  10.0      Southeast.Asia            0.00872           0.014813   \n",
      "11  11.0   Northern.European           0.315368           0.335253   \n",
      "12  12.0  Subsaharan.African           0.001033           0.001697   \n",
      "13  13.0            Africans           0.003151           0.003035   \n",
      "14  14.0              Asians           0.029781            0.03711   \n",
      "15  15.0           Americans           0.039162           0.029714   \n",
      "16  16.0           Europeans           0.927907           0.930141   \n",
      "17  17.0     chr1.841085.C.G                  0                  0   \n",
      "18  18.0    chr1.4390432.T.C                  0                  1   \n",
      "19  19.0    chr1.5302340.T.C                  2                  2   \n",
      "\n",
      "                 4                  5                  6     \\\n",
      "0                  V3                 V4                 V5   \n",
      "1   LP6005681-DNA_E11  LP6005681-DNA_E02  LP6005681-DNA_B08   \n",
      "2                   1                  1                  1   \n",
      "3                   1                  1                  1   \n",
      "4            0.016142           0.001909            0.01312   \n",
      "5            0.359187           0.579706           0.404572   \n",
      "6             0.00618           0.002981           0.000164   \n",
      "7            0.228276           0.148927           0.201339   \n",
      "8            0.010745           0.004057           0.035274   \n",
      "9            0.003121           0.006927           0.006668   \n",
      "10           0.033824           0.029073           0.028545   \n",
      "11           0.342516           0.213888           0.310308   \n",
      "12              1e-05           0.012531              1e-05   \n",
      "13            0.00619           0.015512           0.000174   \n",
      "14           0.049966           0.030982           0.041665   \n",
      "15           0.013866           0.010984           0.041942   \n",
      "16           0.929979           0.942521           0.916219   \n",
      "17                  1                  0                  0   \n",
      "18                  0                  0                  1   \n",
      "19                  1                  1                  1   \n",
      "\n",
      "                 7                  8                  9     ...  \\\n",
      "0                  V6                 V7                 V8  ...   \n",
      "1   LP6005681-DNA_H11  LP6005681-DNA_F01  LP6005681-DNA_B03  ...   \n",
      "2                   1                  1                  1  ...   \n",
      "3                   1                  1                  1  ...   \n",
      "4            0.031593           0.022661           0.000909  ...   \n",
      "5            0.356756           0.355451           0.354227  ...   \n",
      "6            0.001869              1e-05           0.002891  ...   \n",
      "7            0.228752           0.225486           0.237862  ...   \n",
      "8            0.011076           0.021337            0.03284  ...   \n",
      "9            0.008172           0.006818           0.003907  ...   \n",
      "10           0.015595           0.015346           0.027086  ...   \n",
      "11           0.345277           0.348518           0.339698  ...   \n",
      "12           0.000909           0.004374           0.000581  ...   \n",
      "13           0.002778           0.004384           0.003472  ...   \n",
      "14           0.047188           0.038007           0.027995  ...   \n",
      "15           0.019248           0.028155           0.036747  ...   \n",
      "16           0.930785           0.929455           0.931787  ...   \n",
      "17                  1                  0                  0  ...   \n",
      "18                  1                  0                  0  ...   \n",
      "19                  2                  2                  1  ...   \n",
      "\n",
      "                 8945               8946               8947  \\\n",
      "0               V8944              V8945              V8946   \n",
      "1   LP6008243-DNA_F03  LP6008305-DNA_A02  LP6008315-DNA_C03   \n",
      "2                   2                  2                  1   \n",
      "3                   0                  1                  1   \n",
      "4            0.010811           0.024036           0.021658   \n",
      "5             0.35198           0.377873            0.35696   \n",
      "6            0.001313              1e-05           0.002594   \n",
      "7             0.23341           0.208607           0.233103   \n",
      "8            0.023806           0.016431           0.016506   \n",
      "9            0.001906              1e-05            0.00596   \n",
      "10           0.025011            0.03134           0.012992   \n",
      "11           0.351755           0.341682           0.350216   \n",
      "12              1e-05              1e-05              1e-05   \n",
      "13           0.001323              2e-05           0.002604   \n",
      "14           0.035822           0.055376            0.03465   \n",
      "15           0.025712           0.016441           0.022466   \n",
      "16           0.937145           0.928162           0.940279   \n",
      "17                  1                  0                  0   \n",
      "18                  1                  1                  0   \n",
      "19                  2                  1                  2   \n",
      "\n",
      "                 8948               8949               8950  \\\n",
      "0               V8947              V8948              V8949   \n",
      "1   LP6008245-DNA_F10  LP6008247-DNA_B06  LP6008246-DNA_C04   \n",
      "2                   1                  1                  1   \n",
      "3                   0                  1                  1   \n",
      "4            0.016188           0.048021           0.010994   \n",
      "5            0.355751           0.455567           0.435352   \n",
      "6               1e-05            0.00604           0.006973   \n",
      "7            0.225253           0.336691           0.200665   \n",
      "8            0.020678           0.007827           0.014004   \n",
      "9            0.008026           0.010049            0.00615   \n",
      "10           0.031024           0.024125           0.028984   \n",
      "11           0.342104           0.105866           0.267692   \n",
      "12           0.000966           0.005815           0.029185   \n",
      "13           0.000976           0.011855           0.036158   \n",
      "14           0.047212           0.072146           0.039978   \n",
      "15           0.028704           0.017876           0.020154   \n",
      "16           0.923108           0.898124           0.903709   \n",
      "17                  0                  1                  1   \n",
      "18                  1                  1                  0   \n",
      "19                  2                  1                  2   \n",
      "\n",
      "                 8951               8952               8953               8954  \n",
      "0               V8950              V8951              V8952              V8953  \n",
      "1   LP6008199-DNA_G05  LP6008400-DNA_B04  LP6008408-DNA_C08  LP6008400-DNA_F04  \n",
      "2                   1                  1                  2                  2  \n",
      "3                   1                  1                  1                  1  \n",
      "4             0.03415           0.077977           0.061579            0.18862  \n",
      "5            0.385685           0.462906           0.277207           0.302595  \n",
      "6               1e-05           0.000802           0.000675           0.006373  \n",
      "7            0.228473           0.279937           0.220032           0.195867  \n",
      "8            0.014895            0.01426           0.016595             0.0355  \n",
      "9            0.012715           0.006438           0.008179           0.016476  \n",
      "10           0.004657           0.031234           0.028172           0.067441  \n",
      "11            0.31205           0.123186           0.387551           0.187117  \n",
      "12           0.007363           0.003259              1e-05              1e-05  \n",
      "13           0.007373           0.004061           0.000685           0.006383  \n",
      "14           0.038807           0.109211           0.089751           0.256061  \n",
      "15            0.02761           0.020698           0.024774           0.051976  \n",
      "16           0.926208           0.866029            0.88479           0.685579  \n",
      "17                  0                  0                  1                  0  \n",
      "18                  0                  0                  1                  1  \n",
      "19                  2                  1                  0                  1  \n",
      "\n",
      "[20 rows x 8955 columns]\n",
      "(973, 8955)\n",
      "<class 'pandas.core.frame.DataFrame'>\n"
     ]
    }
   ],
   "source": [
    "print(matrix.head(20))\n",
    "print(matrix.shape)\n",
    "print(type(matrix))\n",
    "#print(labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e7b70a04",
   "metadata": {},
   "outputs": [],
   "source": [
    "matrix_re = matrix.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "03fdf298",
   "metadata": {},
   "outputs": [],
   "source": [
    "new_df = matrix_re.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "fe037b8f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8954, 973)\n"
     ]
    }
   ],
   "source": [
    "print(new_df.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b726083f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(973, 8954)\n"
     ]
    }
   ],
   "source": [
    "matrix_re = matrix.transpose()\n",
    "matrix_noNA = matrix_re.dropna()\n",
    "data_labeled = matrix_noNA.transpose()\n",
    "print(data_labeled.shape)\n",
    "#data_labeled = new_df.transpose()\n",
    "#X = data.iloc[17:] #builds df of chrs on (post population info)\n",
    "data = data_labeled.drop(data_labeled.columns[[0]], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cb0a7130",
   "metadata": {},
   "outputs": [],
   "source": [
    "y = data.iloc[3] #builds object of only phenotype\n",
    "y = pd.DataFrame(y) #turns into dataframe\n",
    "y = y.astype(int) \n",
    "#y = y.subtract(1) PHENOTYPE WAS ALREADY CONVERTED TO 1'S AND 0'S WHEN LD CLUMPING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "42697689",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = data.iloc[17:] #builds df of chrs on (post population info)\n",
    "X = X.transpose()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "7bcba6ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8953, 956)\n"
     ]
    }
   ],
   "source": [
    "print(X.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f8753f80",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(6267, 1)\n",
      "(2686, 1)\n"
     ]
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state = 0)\n",
    "print(y_train.shape)\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "41d94da1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(max_iter=10000, random_state=0)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Classifier = LogisticRegression(random_state=0, max_iter = 10000)\n",
    "Classifier.fit(X_train, y_train.values.ravel())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cfee4dbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy score train:  0.7724589117600128\n",
      "Accuracy score test:  0.6824274013402829\n"
     ]
    }
   ],
   "source": [
    "#accuracy\n",
    "y_pred = Classifier.predict(X_test)\n",
    "y_pred_train = Classifier.predict(X_train)\n",
    "print(\"Accuracy score train: \", accuracy_score(y_train, y_pred_train))\n",
    "print(\"Accuracy score test: \", accuracy_score(y_test, y_pred))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "28c130b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Precision train:  0.7888181473095605\n",
      "Precision test:  0.7381029943938374\n"
     ]
    }
   ],
   "source": [
    "#precision\n",
    "print(\"Precision train: \", average_precision_score(y_train, y_pred_train))\n",
    "print(\"Precision test: \", average_precision_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "c6f1686c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Recall train:  0.6323528264600343\n",
      "Recall test:  0.5333581011638565\n"
     ]
    }
   ],
   "source": [
    "#recall\n",
    "print(\"Recall train: \", recall_score(y_train, y_pred_train, average=\"macro\"))\n",
    "print(\"Recall test: \", recall_score(y_test, y_pred, average=\"macro\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "9a5e7cbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F1 train:  0.6475343175890699\n",
      "F1 test:  0.5284102428571222\n"
     ]
    }
   ],
   "source": [
    "#f1\n",
    "print(\"F1 train: \", f1_score(y_train, y_pred_train, average=\"macro\"))\n",
    "print(\"F1 test: \", f1_score(y_test, y_pred, average=\"macro\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "995ad1cd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AUC train:  0.6323528264600343\n",
      "AUC test:  0.5333581011638566\n"
     ]
    }
   ],
   "source": [
    "# auc\n",
    "fpr, tpr, thresholds = metrics.roc_curve(y_test, y_pred)\n",
    "fpr_train, tpr_train, thresholds_train = metrics.roc_curve(y_train, y_pred_train)\n",
    "print(\"AUC train: \", metrics.auc(fpr_train, tpr_train))\n",
    "print(\"AUC test: \", metrics.auc(fpr, tpr))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "c7f271a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#ROC of auc\n",
    "clf = LogisticRegression(solver=\"liblinear\", random_state=0).fit(X_test, y_test.values.ravel())\n",
    "clf = LogisticRegression(solver=\"liblinear\", random_state=0).fit(X_train, y_train.values.ravel())\n",
    "#print(roc_auc_score(y, clf.decision_function(X)))\n",
    "#print(roc_auc_score(y, clf.predict_proba(X)[:, 1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "e67860e7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC plot train\n",
    "RocCurveDisplay.from_predictions(y_train, y_pred_train)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "66002f3c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#ROC plot train\n",
    "RocCurveDisplay.from_predictions(y_test, y_pred)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dbfd6881",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "42b58729",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
